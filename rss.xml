<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Win7GM&#39;s Blog</title>
        <subtitle>今度は頑張る</subtitle>
        <icon>https://blog.msforever.xyz/images/favicon.ico</icon>
        <link>https://blog.msforever.xyz</link>
        <author>
          <name>Win7GM</name>
        </author>
        <description>Anything.</description>
        <language>zh-CN</language>
        <pubDate>Mon, 28 Sep 2020 18:11:44 +0800</pubDate>
        <lastBuildDate>Mon, 28 Sep 2020 18:11:44 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://blog.msforever.xyz/computer-science/data-structures-1/</guid>
            <title>1.线性表</title>
            <link>https://blog.msforever.xyz/computer-science/data-structures-1/</link>
            <category term="笔记" scheme="https://blog.msforever.xyz/categories/note/" />
            <category term="计算机科学" scheme="https://blog.msforever.xyz/categories/note/computer-science/" />
            <category term="数据结构" scheme="https://blog.msforever.xyz/categories/note/computer-science/data-structure/" />
            <category term="unfinished" scheme="https://blog.msforever.xyz/tags/unfinished/" />
            <category term="note" scheme="https://blog.msforever.xyz/tags/note/" />
            <pubDate>Mon, 28 Sep 2020 18:11:44 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;何为线性表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#何为线性表&#34;&gt;#&lt;/a&gt; 何为线性表&lt;/h2&gt;
&lt;p&gt;线性表，顾名思义，就是表中的数据排列成线性的一种数据结构，是零个或多个数据元素的&lt;strong&gt;有限序列&lt;/strong&gt;。简单举个例子，就是排队。&lt;/p&gt;
&lt;h3 id=&#34;有限序列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有限序列&#34;&gt;#&lt;/a&gt; 有限序列&lt;/h3&gt;
&lt;p&gt;什么叫做有限序列？&lt;/p&gt;
&lt;p&gt;例如，一个班级的学生按照学号从小到大的顺序排队。这就是实际生活中的一个有限序列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此处，序列中的元素是学生们，排序的依据是他们的学号。在线性表中，元素排序的依据是他们的编号，从 1 开始，直到最后一个元素结束。&lt;/li&gt;
&lt;li&gt;就像学号是 2 号的同学前面排的是且只能是 1 号同学，后面排的是且只能是 3 号同学一样，线性表中的元素也只能按照一对一的顺序排列。1 号元素后面只能是 2 号元素，2 号元素前面也只能是 1 号元素。线性表中除了头尾两个元素的其他元素，都有且只有一个前驱和一个后继。&lt;/li&gt;
&lt;li&gt;例中排队的都只是学生，老师是不进来排的。同理，线性表存放数据时，只存放一种数据类型。&lt;/li&gt;
&lt;li&gt;最后，例中的学生们是有限的。再大的一个班也不可能有无限大。同理，线性表中的元素个数也是有限的。实际上，计算机处理的所有对象都是有限的。无限的数列只在数学概念中存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;抽象数据类型定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象数据类型定义&#34;&gt;#&lt;/a&gt; 抽象数据类型定义&lt;/h3&gt;
&lt;h4 id=&#34;抽象数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象数据类型&#34;&gt;#&lt;/a&gt; 抽象数据类型&lt;/h4&gt;
&lt;p&gt;抽象数据类型（ADT）是指一个数学模型及定义在该模型上的一组操作。抽象数据类型的定义仅取决于它的一组逻辑特性（逻辑结构），而与其在计算机内部如何表示和实现（存储结构）无关。例如在地图类或绘图等的软件系统中，经常会用到坐标。既然坐标总有三个整型数字在一起出现，我们就定义一个叫做 &lt;code&gt;point&lt;/code&gt;  的抽象数据类型，它有 x，y 和 z 三个整型变量。&lt;/p&gt;
&lt;p&gt;定义一个抽象数据类型，还需要定义在该模型上的一组操作。例如刚才的 &lt;code&gt;point&lt;/code&gt; ，在实际应用中，我们会需要计算一个点与另外一个点的距离，即输入两个点的坐标，输出两点间的距离。这就是基于 &lt;code&gt;point&lt;/code&gt;  的一组操作。&lt;/p&gt;
&lt;h4 id=&#34;线性表的抽象数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表的抽象数据类型&#34;&gt;#&lt;/a&gt; 线性表的抽象数据类型&lt;/h4&gt;
&lt;p&gt;如上定义，我们可以写出线性表的抽象数据类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ADT 线性表(List)
Data
    线性表的数据对象集合为&amp;#123;a1, a2, ..., an&amp;#125;，每个元素的类型均为 DataType。
    其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素。
    除了最后一个元素an外，每一个元素有且只有一个直接后继元素。
    数据元素之间的关系是一对一的关系。
Operation
    InitList(*L):   初始化，建立一个空的线性表L。
    DestroyList(*L)：   销毁线性表，释放线性表L占用的空间。
    ListLength(L)：求线性表的长度，返回L中元素的个数。
    ListEmpty(L)：  若线性表为空，返回true；否则返回false。
    ClearList(*L)： 将线性表清空。
    GetElem(L, i, *e)： 将线性表L中的第i个位置的元素返回给e。
    LocateElem(L, e)：  在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功。
    ListInsert(*L, i, e)：  在线性表L中的第i个元素前插入与给定值e相等的元素。
    ListDelete(*L, i, e):   找到线性表中的第i个元素，将之存入e中，并从表中删除。
    DispList(L)：   输出整个表。
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;note danger&#34;&gt;
&lt;p&gt;当你传递一个参数给函数时，这个参数是否需要在函数内被改动决定了使用什么参数形式。如果需要被改动，则需要传递指向这个参数的指针，如果不用被改动，可以直接传递这个参数。&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;线性表存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表存储结构&#34;&gt;#&lt;/a&gt; 线性表存储结构&lt;/h3&gt;
&lt;h4 id=&#34;线性表的顺序存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表的顺序存储结构&#34;&gt;#&lt;/a&gt; 线性表的顺序存储结构&lt;/h4&gt;
&lt;h5 id=&#34;顺序储存结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序储存结构&#34;&gt;#&lt;/a&gt; 顺序储存结构&lt;/h5&gt;
&lt;p&gt;顺序储存结构，顾名思义，是以事物的逻辑结构为存储结构来进行储存。比如上面那个按学号排队的例子。每个同学都有一个学号，按照学号从小到大排队，我们就可以轻松的通过某位同学在队伍中的位置获知这位同学是谁。&lt;/p&gt;
&lt;p&gt;如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;学号&lt;/th&gt;
&lt;th&gt;位置&lt;/th&gt;
&lt;th&gt;人名&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2020000001&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020000002&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020000003&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;李明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;……&lt;/td&gt;
&lt;td&gt;……&lt;/td&gt;
&lt;td&gt;……&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;顺序存储结构的线性表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序存储结构的线性表&#34;&gt;#&lt;/a&gt; 顺序存储结构的线性表&lt;/h5&gt;
&lt;p&gt;在实际使用中，我们定义顺序存储结构的线性表如：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ElemType data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;MAX_SIZE&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;//MAX_SIZE 是预先定义好的 const&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                 &lt;span class=&#34;token comment&#34;&gt;// 用于存储线性表长度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;SqList&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;数组（int a [n]）的存储实现方式如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;data[0]&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;data[1]&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;data[2]&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;data[3]&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;...&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;data[n]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int 1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int 2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int 3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int 4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;...&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int n&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;是不是正好符合顺序存储结构的线性表的需要？&lt;br /&gt;
所以，我们可以在此使用数组。&lt;/p&gt;
&lt;p&gt;另外，我们还可以使用 malloc () 函数和 realloc () 函数，对线性表的存储空间进行动态分配。&lt;br /&gt;
如此，线性表定义如：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ElemType&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;SqList&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;因为在 C 和 C++ 中，声明一个数组 a 后，实际上变量 a 的值是数组的起始地址。也就是说，其实 a 是一个 const int*。可知，我们对指针类型变量操作，如：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输出起始地址为 data 的 int 的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输出起始地址为 data+i*sizeof (int) 的 int 的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;也可以像操作数组一样操作对应位置的数据。&lt;/p&gt;
&lt;p&gt;所以，以上两种定义方式的存储结构是一样的，都和上面的表格一样。唯一的区别是使用数组则线性表长度有最大限制，为 MAX_SIZE；而使用指针并使用 malloc () 和 realloc () 则线性表长度没有最大限制。&lt;/p&gt;
&lt;p&gt;线性表的基本操作如上 ADT，可以根据实际需要进行删减或添加。&lt;/p&gt;
&lt;h5 id=&#34;顺序存储结构线性表的应用实例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序存储结构线性表的应用实例&#34;&gt;#&lt;/a&gt; 顺序存储结构线性表的应用实例&lt;/h5&gt;
&lt;h6 id=&#34;例1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例1&#34;&gt;#&lt;/a&gt; 例 1&lt;/h6&gt;
&lt;p&gt;假设一个线性表采用顺序存储结构，设计一个算法，删除其中所有值等于 &lt;code&gt;x&lt;/code&gt;  的元素，要求算法的时间复杂度为 &lt;code&gt;O(n)&lt;/code&gt; ，空间复杂度为 &lt;code&gt;O(1)&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;tab&#34; data-id=&#34;id1&#34; data-title=&#34;解法1&#34;&gt;
&lt;p&gt;设删除所有值为 &lt;code&gt;x&lt;/code&gt;  的元素后的表 &lt;code&gt;L&lt;/code&gt;  为表 &lt;code&gt;L1&lt;/code&gt; ，显然 &lt;code&gt;L1&lt;/code&gt;  是 &lt;code&gt;L&lt;/code&gt;  的子集，所以 &lt;code&gt;L1&lt;/code&gt;  可以直接重用 &lt;code&gt;L&lt;/code&gt;  的空间。扫描表 &lt;code&gt;L&lt;/code&gt; ，重建 &lt;code&gt;L&lt;/code&gt;  只包含不等于 &lt;code&gt;x&lt;/code&gt;  的元素。&lt;/p&gt;
&lt;p&gt;算法过程是令 &lt;code&gt;k=0&lt;/code&gt; （用于记录新表中的元素个数），用 &lt;code&gt;i&lt;/code&gt;  从左到右扫描 &lt;code&gt;L&lt;/code&gt;  中的所有元素，当 &lt;code&gt;i&lt;/code&gt;  指向的元素为 &lt;code&gt;x&lt;/code&gt;  时跳过它；否则将其放置在 &lt;code&gt;k&lt;/code&gt;  的位置，即 &lt;code&gt;L-&amp;gt;data[k]=L-&amp;gt;data[i],k++&lt;/code&gt; 。&lt;br /&gt;
算法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;delnode1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;SqList&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;L&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ElemType x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; k &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;L&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;L&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            L&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; L&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            k&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    L&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;div class=&#34;tab&#34; data-id=&#34;id1&#34; data-title=&#34;解法2&#34;&gt;
&lt;p&gt;扫描表 &lt;code&gt;L&lt;/code&gt; ，用 &lt;code&gt;i&lt;/code&gt;  从左到右扫描 &lt;code&gt;L&lt;/code&gt;  中的所有元素，用 &lt;code&gt;k&lt;/code&gt;  记录 &lt;code&gt;L&lt;/code&gt;  中当前等于 &lt;code&gt;x&lt;/code&gt;  的元素的个数，一边扫描 &lt;code&gt;L&lt;/code&gt;  一边统计当前 &lt;code&gt;k&lt;/code&gt;  值。当 &lt;code&gt;i&lt;/code&gt;  指向的元素为 &lt;code&gt;x&lt;/code&gt;  时 &lt;code&gt;k&lt;/code&gt;  增 1；否则将不为 &lt;code&gt;x&lt;/code&gt;  的元素前移 &lt;code&gt;k&lt;/code&gt;  个位置，即 &lt;code&gt;L-&amp;gt;data[i-k]=L-&amp;gt;data[i]&lt;/code&gt; 。最后修改 &lt;code&gt;L&lt;/code&gt;  的长度。&lt;br /&gt;
算法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;delnode2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;SqList&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;L&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ElemType x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; k &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;L&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;L&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            k&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            L&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; L&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    L&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.msforever.xyz/instructions-on-the-blog/</guid>
            <title>基于Hexo的博客的安装和配置</title>
            <link>https://blog.msforever.xyz/instructions-on-the-blog/</link>
            <category term="杂项" scheme="https://blog.msforever.xyz/categories/misc/" />
            <category term="博客" scheme="https://blog.msforever.xyz/categories/misc/blog/" />
            <category term="manual" scheme="https://blog.msforever.xyz/tags/manual/" />
            <category term="unfinished" scheme="https://blog.msforever.xyz/tags/unfinished/" />
            <pubDate>Mon, 28 Sep 2020 13:31:25 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;也不知道能写点啥，姑且写写博客配置的过程吧。&lt;/p&gt;
&lt;h2 id=&#34;博客的安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#博客的安装&#34;&gt;#&lt;/a&gt; 博客的安装&lt;/h2&gt;
&lt;p&gt;我使用的是 Debian 9 x64。安装 Hexo 需要先安装 Node.js 和 Git 。&lt;/p&gt;
&lt;div class=&#34;note danger&#34;&gt;
&lt;p&gt;&lt;strong&gt;你需要  &lt;code&gt;root&lt;/code&gt;  权限。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;安装git&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装git&#34;&gt;#&lt;/a&gt; 安装 Git&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; git-core&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;安装nodejs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装nodejs&#34;&gt;#&lt;/a&gt; 安装 Node.js&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; -sL https://deb.nodesource.com/setup_current.x &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bash&lt;/span&gt; -&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -y nodejs&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;安装hexo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装hexo&#34;&gt;#&lt;/a&gt; 安装 Hexo&lt;/h3&gt;
&lt;p&gt;在安装完 &lt;em&gt;Git&lt;/em&gt; 和 &lt;em&gt;Node.js&lt;/em&gt; 之后，我们便可以使用 npm 来安装 &lt;em&gt;Hexo&lt;/em&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -g hexo-cli&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;初始化博客&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化博客&#34;&gt;#&lt;/a&gt; 初始化博客&lt;/h2&gt;
&lt;p&gt;在安装完后，你需要手动新建博客。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo init &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;folder&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#你想要的文件夹的名称&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#该命令会使 Hexo 初始化一个新博客于你指定名称和路径的文件夹。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#例如你在～/ 下执行 hexo init blog，就会建立一个为～/blog 的文件夹用于存放博客数据。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;folder&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ·       &lt;span class=&#34;token comment&#34;&gt;#切换到博客根目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;程序运行完毕后，指定文件夹的目录应该会被初始化如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;_configyml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_configyml&#34;&gt;#&lt;/a&gt; _config.yml&lt;/h3&gt;
&lt;p&gt;该文件存放博客的配置信息。有些插件也需要在此处进行设置。&lt;/p&gt;
&lt;h3 id=&#34;packagejson&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#packagejson&#34;&gt;#&lt;/a&gt; package.json&lt;/h3&gt;
&lt;p&gt;应用程序的信息。EJS，Stylus 和 Markdown renderer 默认会被安装，你可以自由移除。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package.json
&amp;#123;
  &amp;quot;name&amp;quot;: &amp;quot;hexo-site&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.0&amp;quot;,
  &amp;quot;private&amp;quot;: true,
  &amp;quot;hexo&amp;quot;: &amp;#123;
    &amp;quot;version&amp;quot;: &amp;quot;&amp;quot;
  &amp;#125;,
  &amp;quot;dependencies&amp;quot;: &amp;#123;
    &amp;quot;hexo&amp;quot;: &amp;quot;^3.8.0&amp;quot;,
    &amp;quot;hexo-generator-archive&amp;quot;: &amp;quot;^0.1.5&amp;quot;,
    &amp;quot;hexo-generator-category&amp;quot;: &amp;quot;^0.1.3&amp;quot;,
    &amp;quot;hexo-generator-index&amp;quot;: &amp;quot;^0.2.1&amp;quot;,
    &amp;quot;hexo-generator-tag&amp;quot;: &amp;quot;^0.2.0&amp;quot;,
    &amp;quot;hexo-renderer-ejs&amp;quot;: &amp;quot;^0.3.1&amp;quot;,
    &amp;quot;hexo-renderer-stylus&amp;quot;: &amp;quot;^0.3.3&amp;quot;,
    &amp;quot;hexo-renderer-marked&amp;quot;: &amp;quot;^0.3.2&amp;quot;,
    &amp;quot;hexo-server&amp;quot;: &amp;quot;^0.3.3&amp;quot;
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;scaffolds&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#scaffolds&#34;&gt;#&lt;/a&gt; scaffolds&lt;/h3&gt;
&lt;p&gt;模板文件夹。新建文章时，Hexo 会根据其内容物来建立文件。&lt;br /&gt;
Hexo 的模板指的是在新建的文章（.md）中默认填充的内容。&lt;/p&gt;
&lt;h3 id=&#34;source&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#source&#34;&gt;#&lt;/a&gt; source&lt;/h3&gt;
&lt;p&gt;资源文件夹。存放用户资源。除了 &lt;code&gt;_posts&lt;/code&gt;  文件夹之外，开头命名为 &lt;code&gt;_&lt;/code&gt; 的文件 / 文件夹和隐藏的文件将被忽略。Markdown 和 HTML 文件会被解析并放到  &lt;code&gt;public&lt;/code&gt;  文件夹，其余文件会被直接拷贝。&lt;/p&gt;
&lt;h3 id=&#34;themes&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#themes&#34;&gt;#&lt;/a&gt; themes&lt;/h3&gt;
&lt;p&gt;主题文件夹。Hexo 会根据主题来生成静态页面。&lt;/p&gt;
&lt;h2 id=&#34;使用-git-同步博客源文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-git-同步博客源文件&#34;&gt;#&lt;/a&gt; 使用 Git 同步博客源文件&lt;/h2&gt;
&lt;p&gt;在实际的使用中，你可能像我一样因为诸如 ssh 操作不便，希望能在远端修改配置等原因，想把文件上传到 Github 的私有仓库或自家 NAS 的 git 仓库里慢慢改。&lt;/p&gt;
&lt;h3 id=&#34;git-使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git-使用&#34;&gt;#&lt;/a&gt; Git 使用&lt;/h3&gt;
&lt;p&gt;首先，确定你在博客的根目录下。执行：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; init&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如此，你初始化了一个空的 Git 仓库。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;ls -a&lt;/code&gt;  命令可以查看当前目录下的所有文件 / 文件夹。你可以看到在你的博客根目录下生成了 &lt;code&gt;.git&lt;/code&gt;  文件夹。&lt;/p&gt;
&lt;p&gt;接下来，你可以使用&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; ./&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;来添加该目录下的所有文件 / 文件夹到你的 git 仓库暂存区中。&lt;/p&gt;
&lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;值得注意的是，如果该目录下的文件夹中包含 &lt;code&gt;.git&lt;/code&gt;  文件夹，即该文件夹有另外一个 git 仓库，&lt;strong&gt;该文件夹内的文件不会被添加到仓库中。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;另外，每次你修改文件后想要推送，都需要先执行一次 &lt;code&gt;git add ./&lt;/code&gt; ，来将修改后的文件添加到暂存区。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在将文件推送至远端 git 仓库前，你需要先将暂存区提交到本地仓库。执行：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit -m &lt;span class=&#34;token string&#34;&gt;&#34;你的提交信息&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以将暂存区提交到本地仓库。&lt;/p&gt;
&lt;p&gt;成功提交后，你可以执行：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;你的远端git地址&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;分支名&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#例如 git push git@github.com:Win7GM/Hexo-resources.git master&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以将本地仓库内容推送到远端 git 仓库。&lt;/p&gt;
&lt;h2 id=&#34;配置博客&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置博客&#34;&gt;#&lt;/a&gt; 配置博客&lt;/h2&gt;
&lt;h3 id=&#34;_configyml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_configyml-2&#34;&gt;#&lt;/a&gt; _config.yml&lt;/h3&gt;
&lt;p&gt;_config.yml 是博客的基础配置。&lt;/p&gt;
&lt;h2 id=&#34;引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用&#34;&gt;#&lt;/a&gt; 引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv&#34;&gt;Hexo&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=&#34;&gt;Yume Shoka&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.msforever.xyz/hello-world/</guid>
            <title>Hello World</title>
            <link>https://blog.msforever.xyz/hello-world/</link>
            <category term="杂项" scheme="https://blog.msforever.xyz/categories/misc/" />
            <category term="ignore_this" scheme="https://blog.msforever.xyz/tags/ignore-this/" />
            <pubDate>Wed, 23 Sep 2020 21:56:49 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo new &amp;quot;My New Post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo generate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.msforever.xyz/about/</guid>
            <title>小透明的小小一步</title>
            <link>https://blog.msforever.xyz/about/</link>
            <category term="杂项" scheme="https://blog.msforever.xyz/categories/misc/" />
            <category term="关于" scheme="https://blog.msforever.xyz/categories/misc/%E5%85%B3%E4%BA%8E/" />
            <category term="ignore_this" scheme="https://blog.msforever.xyz/tags/ignore-this/" />
            <pubDate>Tue, 22 Sep 2020 12:07:25 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;在下 Win7GM，是个小透明。&lt;br /&gt;
希望自己能在这个博客里留下点有用的东西 XD&lt;/p&gt;
&lt;p&gt;歌单是 196⑨的 w&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
