{
    "version": "https://jsonfeed.org/version/1",
    "title": "Win7GM's Blog",
    "subtitle": "今度は頑張る",
    "icon": "https://blog.msforever.xyz/images/favicon.ico",
    "description": "Anything.",
    "home_page_url": "https://blog.msforever.xyz",
    "items": [
        {
            "id": "https://blog.msforever.xyz/instructions-on-the-blog/",
            "url": "https://blog.msforever.xyz/instructions-on-the-blog/",
            "title": "基于Hexo的博客的安装和配置",
            "date_published": "2020-09-28T05:31:25.456Z",
            "content_html": "<p>也不知道能写点啥，姑且写写博客配置的过程吧。</p>\n<h2 id=\"博客的安装\"><a class=\"anchor\" href=\"#博客的安装\">#</a> 博客的安装</h2>\n<p>我使用的是 Debian 9 x64。安装 Hexo 需要先安装 Node.js 和 Git 。</p>\n<div class=\"note danger\">\n<p><strong>你需要  <code>root</code>  权限。</strong></p>\n</div>\n<h3 id=\"安装git\"><a class=\"anchor\" href=\"#安装git\">#</a> 安装 Git</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> git-core</pre></td></tr></table></figure><h3 id=\"安装nodejs\"><a class=\"anchor\" href=\"#安装nodejs\">#</a> 安装 Node.js</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">curl</span> -sL https://deb.nodesource.com/setup_current.x <span class=\"token operator\">|</span> <span class=\"token function\">bash</span> -</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -y nodejs</pre></td></tr></table></figure><h3 id=\"安装hexo\"><a class=\"anchor\" href=\"#安装hexo\">#</a> 安装 Hexo</h3>\n<p>在安装完 <em>Git</em> 和 <em>Node.js</em> 之后，我们便可以使用 npm 来安装 <em>Hexo</em> 。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</pre></td></tr></table></figure><h2 id=\"初始化博客\"><a class=\"anchor\" href=\"#初始化博客\">#</a> 初始化博客</h2>\n<p>在安装完后，你需要手动新建博客。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>hexo init <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span>  <span class=\"token comment\">#你想要的文件夹的名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\">#该命令会使 Hexo 初始化一个新博客于你指定名称和路径的文件夹。</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\">#例如你在～/ 下执行 hexo init blog，就会建立一个为～/blog 的文件夹用于存放博客数据。</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> ·       <span class=\"token comment\">#切换到博客根目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p>程序运行完毕后，指定文件夹的目录应该会被初始化如</p>\n<pre><code>.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n</code></pre>\n<h3 id=\"_configyml\"><a class=\"anchor\" href=\"#_configyml\">#</a> _config.yml</h3>\n<p>该文件存放博客的配置信息。有些插件也需要在此处进行设置。</p>\n<h3 id=\"packagejson\"><a class=\"anchor\" href=\"#packagejson\">#</a> package.json</h3>\n<p>应用程序的信息。EJS，Stylus 和 Markdown renderer 默认会被安装，你可以自由移除。</p>\n<pre><code>package.json\n&#123;\n  &quot;name&quot;: &quot;hexo-site&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;private&quot;: true,\n  &quot;hexo&quot;: &#123;\n    &quot;version&quot;: &quot;&quot;\n  &#125;,\n  &quot;dependencies&quot;: &#123;\n    &quot;hexo&quot;: &quot;^3.8.0&quot;,\n    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,\n    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,\n    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,\n    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,\n    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,\n    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,\n    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,\n    &quot;hexo-server&quot;: &quot;^0.3.3&quot;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"scaffolds\"><a class=\"anchor\" href=\"#scaffolds\">#</a> scaffolds</h3>\n<p>模板文件夹。新建文章时，Hexo 会根据其内容物来建立文件。<br />\nHexo 的模板指的是在新建的文章（.md）中默认填充的内容。</p>\n<h3 id=\"source\"><a class=\"anchor\" href=\"#source\">#</a> source</h3>\n<p>资源文件夹。存放用户资源。除了 <code>_posts</code>  文件夹之外，开头命名为 <code>_</code> 的文件 / 文件夹和隐藏的文件将被忽略。Markdown 和 HTML 文件会被解析并放到  <code>public</code>  文件夹，其余文件会被直接拷贝。</p>\n<h3 id=\"themes\"><a class=\"anchor\" href=\"#themes\">#</a> themes</h3>\n<p>主题文件夹。Hexo 会根据主题来生成静态页面。</p>\n<h2 id=\"使用-git-同步博客源文件\"><a class=\"anchor\" href=\"#使用-git-同步博客源文件\">#</a> 使用 Git 同步博客源文件</h2>\n<p>在实际的使用中，你可能像我一样因为诸如 ssh 操作不便，希望能在远端修改配置等原因，想把文件上传到 Github 的私有仓库或自家 NAS 的 git 仓库里慢慢改。</p>\n<h3 id=\"git-使用\"><a class=\"anchor\" href=\"#git-使用\">#</a> Git 使用</h3>\n<p>首先，确定你在博客的根目录下。执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> init</pre></td></tr></table></figure><p>如此，你初始化了一个空的 Git 仓库。</p>\n<p>使用 <code>ls -a</code>  命令可以查看当前目录下的所有文件 / 文件夹。你可以看到在你的博客根目录下生成了 <code>.git</code>  文件夹。</p>\n<p>接下来，你可以使用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> ./</pre></td></tr></table></figure><p>来添加该目录下的所有文件 / 文件夹到你的 git 仓库暂存区中。</p>\n<div class=\"note warning\">\n<p>值得注意的是，如果该目录下的文件夹中包含 <code>.git</code>  文件夹，即该文件夹有另外一个 git 仓库，<strong>该文件夹内的文件不会被添加到仓库中。</strong></p>\n</div>\n<div class=\"note warning\">\n<p>另外，每次你修改文件后想要推送，都需要先执行一次 <code>git add ./</code> ，来将修改后的文件添加到暂存区。</p>\n</div>\n<p>在将文件推送至远端 git 仓库前，你需要先将暂存区提交到本地仓库。执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"你的提交信息\"</span></pre></td></tr></table></figure><p>以将暂存区提交到本地仓库。</p>\n<p>成功提交后，你可以执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token operator\">&lt;</span>你的远端git地址<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>分支名<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\">#例如 git push git@github.com:Win7GM/Hexo-resources.git master</span></pre></td></tr></table></figure><p>以将本地仓库内容推送到远端 git 仓库。</p>\n<h2 id=\"配置博客\"><a class=\"anchor\" href=\"#配置博客\">#</a> 配置博客</h2>\n<h3 id=\"_configyml-2\"><a class=\"anchor\" href=\"#_configyml-2\">#</a> _config.yml</h3>\n<p>_config.yml 是博客的基础配置。</p>\n<h2 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\">Hexo</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=\">Yume Shoka</span></li>\n</ul>\n",
            "tags": [
                "杂项",
                "博客",
                "unfinished",
                "manual"
            ]
        },
        {
            "id": "https://blog.msforever.xyz/data-structures-1/",
            "url": "https://blog.msforever.xyz/data-structures-1/",
            "title": "1.线性表",
            "date_published": "2020-09-26T14:38:35.605Z",
            "content_html": "<h2 id=\"何为线性表\"><a class=\"anchor\" href=\"#何为线性表\">#</a> 何为线性表</h2>\n<p>线性表，顾名思义，就是表中的数据排列成线性的一种数据结构，是零个或多个数据元素的<strong>有限序列</strong>。简单举个例子，就是排队。</p>\n<h3 id=\"有限序列\"><a class=\"anchor\" href=\"#有限序列\">#</a> 有限序列</h3>\n<p>什么叫做有限序列？</p>\n<p>例如，一个班级的学生按照学号从小到大的顺序排队。这就是实际生活中的一个有限序列。</p>\n<ul>\n<li>此处，序列中的元素是学生们，排序的依据是他们的学号。在线性表中，元素排序的依据是他们的编号，从 1 开始，直到最后一个元素结束。</li>\n<li>就像学号是 2 号的同学前面排的是且只能是 1 号同学，后面排的是且只能是 3 号同学一样，线性表中的元素也只能按照一对一的顺序排列。1 号元素后面只能是 2 号元素，2 号元素前面也只能是 1 号元素。线性表中除了头尾两个元素的其他元素，都有且只有一个前驱和一个后继。</li>\n<li>例中排队的都只是学生，老师是不进来排的。同理，线性表存放数据时，只存放一种数据类型。</li>\n<li>最后，例中的学生们是有限的。再大的一个班也不可能有无限大。同理，线性表中的元素个数也是有限的。实际上，计算机处理的所有对象都是有限的。无限的数列只在数学概念中存在。</li>\n</ul>\n<h3 id=\"抽象数据类型定义\"><a class=\"anchor\" href=\"#抽象数据类型定义\">#</a> 抽象数据类型定义</h3>\n<h4 id=\"抽象数据类型\"><a class=\"anchor\" href=\"#抽象数据类型\">#</a> 抽象数据类型</h4>\n<p>抽象数据类型（ADT）是指一个数学模型及定义在该模型上的一组操作。抽象数据类型的定义仅取决于它的一组逻辑特性（逻辑结构），而与其在计算机内部如何表示和实现（存储结构）无关。例如在地图类或绘图等的软件系统中，经常会用到坐标。既然坐标总有三个整型数字在一起出现，我们就定义一个叫做 <code>point</code>  的抽象数据类型，它有 x，y 和 z 三个整型变量。</p>\n<p>定义一个抽象数据类型，还需要定义在该模型上的一组操作。例如刚才的 <code>point</code> ，在实际应用中，我们会需要计算一个点与另外一个点的距离，即输入两个点的坐标，输出两点间的距离。这就是基于 <code>point</code>  的一组操作。</p>\n<h4 id=\"线性表的抽象数据类型\"><a class=\"anchor\" href=\"#线性表的抽象数据类型\">#</a> 线性表的抽象数据类型</h4>\n<p>如上定义，我们可以写出线性表的抽象数据类型：</p>\n<pre><code>ADT 线性表(List)\nData\n    线性表的数据对象集合为&#123;a1, a2, ..., an&#125;，每个元素的类型均为 DataType。\n    其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素。\n    除了最后一个元素an外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):   初始化，建立一个空的线性表L。\n    DestroyList(*L)：   销毁线性表，释放线性表L占用的空间。\n    ListLength(L)：求线性表的长度，返回L中元素的个数。\n    ListEmpty(L)：  若线性表为空，返回true；否则返回false。\n    ClearList(*L)： 将线性表清空。\n    GetElem(L, i, *e)： 将线性表L中的第i个位置的元素返回给e。\n    LocateElem(L, e)：  在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功。\n    ListInsert(*L, i, e)：  在线性表L中的第i个元素前插入与给定值e相等的元素。\n    ListDelete(*L, i, e):   找到线性表中的第i个元素，将之存入e中，并从表中删除。\n    DispList(L)：   输出整个表。\n</code></pre>\n<div class=\"note danger\">\n<p>当你传递一个参数给函数时，这个参数是否需要在函数内被改动决定了使用什么参数形式。如果需要被改动，则需要传递指向这个参数的指针，如果不用被改动，可以直接传递这个参数。</p>\n</div>\n<h3 id=\"线性表存储结构\"><a class=\"anchor\" href=\"#线性表存储结构\">#</a> 线性表存储结构</h3>\n<h4 id=\"线性表的顺序存储结构\"><a class=\"anchor\" href=\"#线性表的顺序存储结构\">#</a> 线性表的顺序存储结构</h4>\n<h5 id=\"顺序储存结构\"><a class=\"anchor\" href=\"#顺序储存结构\">#</a> 顺序储存结构</h5>\n<p>顺序储存结构，顾名思义，是以事物的逻辑结构为存储结构来进行储存。比如上面那个按学号排队的例子。每个同学都有一个学号，按照学号从小到大排队，我们就可以轻松的通过某位同学在队伍中的位置获知这位同学是谁。</p>\n<p>如下表：</p>\n<table>\n<thead>\n<tr>\n<th>学号</th>\n<th>位置</th>\n<th>人名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2020000001</td>\n<td>1</td>\n<td>张三</td>\n</tr>\n<tr>\n<td>2020000002</td>\n<td>2</td>\n<td>李四</td>\n</tr>\n<tr>\n<td>2020000003</td>\n<td>3</td>\n<td>李明</td>\n</tr>\n<tr>\n<td>……</td>\n<td>……</td>\n<td>……</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"顺序存储结构的线性表\"><a class=\"anchor\" href=\"#顺序存储结构的线性表\">#</a> 顺序存储结构的线性表</h5>\n<p>在实际使用中，我们定义顺序存储结构的线性表如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ElemType data<span class=\"token punctuation\">[</span>MAX_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//MAX_SIZE 是预先定义好的 const</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 用于存储线性表长度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SqList<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>数组（int a [n]）的存储实现方式如下表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">data[0]</th>\n<th style=\"text-align:center\">data[1]</th>\n<th style=\"text-align:center\">data[2]</th>\n<th style=\"text-align:center\">data[3]</th>\n<th style=\"text-align:center\">...</th>\n<th style=\"text-align:center\">data[n]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">int 1</td>\n<td style=\"text-align:center\">int 2</td>\n<td style=\"text-align:center\">int 3</td>\n<td style=\"text-align:center\">int 4</td>\n<td style=\"text-align:center\">...</td>\n<td style=\"text-align:center\">int n</td>\n</tr>\n</tbody>\n</table>\n<p>是不是正好符合顺序存储结构的线性表的需要？<br />\n所以，我们可以在此使用数组。</p>\n<p>另外，我们还可以使用 malloc () 函数和 realloc () 函数，对线性表的存储空间进行动态分配。<br />\n如此，线性表定义如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ElemType<span class=\"token operator\">*</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SqList<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>因为在 C 和 C++ 中，声明一个数组 a 后，实际上变量 a 的值是数组的起始地址。也就是说，其实 a 是一个 const int*。可知，我们对指针类型变量操作，如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>d<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出起始地址为 data 的 int 的值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>d<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出起始地址为 data+i*sizeof (int) 的 int 的值</span></pre></td></tr></table></figure><p>也可以像操作数组一样操作对应位置的数据。</p>\n<p>所以，以上两种定义方式的存储结构是一样的，都和上面的表格一样。唯一的区别是使用数组则线性表长度有最大限制，为 MAX_SIZE；而使用指针并使用 malloc () 和 realloc () 则线性表长度没有最大限制。</p>\n<p>线性表的基本操作如上 ADT，可以根据实际需要进行删减或添加。</p>\n<h5 id=\"顺序存储结构线性表的应用实例\"><a class=\"anchor\" href=\"#顺序存储结构线性表的应用实例\">#</a> 顺序存储结构线性表的应用实例</h5>\n<h6 id=\"例1\"><a class=\"anchor\" href=\"#例1\">#</a> 例 1</h6>\n<p>假设一个线性表采用顺序存储结构，设计一个算法，删除其中所有值等于 <code>x</code>  的元素，要求算法的时间复杂度为 <code>O(n)</code> ，空间复杂度为 <code>O(1)</code> 。</p>\n<div class=\"tab\" data-id=\"id1\" data-title=\"解法1\">\n<p>设删除所有值为 <code>x</code>  的元素后的表 <code>L</code>  为表 <code>L1</code> ，显然 <code>L1</code>  是 <code>L</code>  的子集，所以 <code>L1</code>  可以直接重用 <code>L</code>  的空间。扫描表 <code>L</code> ，重建 <code>L</code>  只包含不等于 <code>x</code>  的元素。</p>\n<p>算法过程是令 <code>k=0</code> （用于记录新表中的元素个数），用 <code>i</code>  从左到右扫描 <code>L</code>  中的所有元素，当 <code>i</code>  指向的元素为 <code>x</code>  时跳过它；否则将其放置在 <code>k</code>  的位置，即 <code>L-&gt;data[k]=L-&gt;data[i],k++</code> 。<br />\n算法如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">delnode1</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">*</span> <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span> ElemType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>L<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    L<span class=\"token operator\">-></span>length <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"解法2\">\n<p>扫描表 <code>L</code> ，用 <code>i</code>  从左到右扫描 <code>L</code>  中的所有元素，用 <code>k</code>  记录 <code>L</code>  中当前等于 <code>x</code>  的元素的个数，一边扫描 <code>L</code>  一边统计当前 <code>k</code>  值。当 <code>i</code>  指向的元素为 <code>x</code>  时 <code>k</code>  增 1；否则将不为 <code>x</code>  的元素前移 <code>k</code>  个位置，即 <code>L-&gt;data[i-k]=L-&gt;data[i]</code> 。最后修改 <code>L</code>  的长度。<br />\n算法如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">delnode2</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">*</span> <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span> ElemType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>L<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    L<span class=\"token operator\">-></span>length <span class=\"token operator\">-=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "笔记",
                "计算机科学",
                "数据结构",
                "note",
                "unfinished"
            ]
        },
        {
            "id": "https://blog.msforever.xyz/hello-world/",
            "url": "https://blog.msforever.xyz/hello-world/",
            "title": "Hello World",
            "date_published": "2020-09-23T13:56:49.607Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<pre><code class=\"language-bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<pre><code class=\"language-bash\">$ hexo server\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<pre><code class=\"language-bash\">$ hexo generate\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<pre><code class=\"language-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "杂项",
                "ignore_this"
            ]
        },
        {
            "id": "https://blog.msforever.xyz/about/",
            "url": "https://blog.msforever.xyz/about/",
            "title": "小透明的小小一步",
            "date_published": "2020-09-22T04:07:25.000Z",
            "content_html": "<p>在下 Win7GM，是个小透明。<br />\n希望自己能在这个博客里留下点有用的东西 XD</p>\n<p>歌单是 196⑨的 w</p>\n",
            "tags": [
                "杂项",
                "关于",
                "ignore_this"
            ]
        }
    ]
}